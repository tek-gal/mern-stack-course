{"version":3,"sources":["hooks/http.hook.js","context/AuthContext.js","components/Loader.js","components/LinksList.js","pages/LinksPage.js","pages/AuthPage.js","hooks/message.hook.js","pages/CreatePage.js","components/LinkCard.js","pages/DetailPage.js","components/Navbar.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","Loader","style","display","justifyContent","paddingTop","className","LinksList","links","length","map","link","index","key","_id","from","to","LinksPage","setLinks","useContext","fetchLinks","Authorization","fetched","useEffect","AuthPage","auth","text","window","M","toast","html","email","password","form","setForm","updateTextFields","handleChange","event","target","name","value","handleRegister","handleLogin","placeholder","id","type","onChange","htmlFor","marginRight","onClick","disabled","CreatePage","history","useHistory","setLink","handleKeyPress","push","e","onKeyPress","LinkCard","href","rel","clicks","Date","date","toLocaleDateString","DetailPage","linkId","useParams","getLink","Navbar","preventDefault","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","console"],"mappings":"0PAEaA,EAAU,WAAO,IAAD,EACGC,oBAAS,GADZ,mBACpBC,EADoB,KACXC,EADW,OAEDF,mBAAS,MAFR,mBAEpBG,EAFoB,KAEbC,EAFa,KAsC3B,MAAO,CAAEH,UAASI,QAlCFC,sBAAW,uCACzB,WAAOC,GAAP,mCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,GACjDT,GAAW,GADb,SAIQQ,IACFA,EAAOE,KAAKC,UAAUH,GACtBC,EAAQ,gBAAkB,oBANhC,SAS2BG,MAAMP,EAAK,CAChCE,SACAC,OACAC,YAZN,cASUI,EATV,iBAcuBA,EAASC,OAdhC,WAcUC,EAdV,OAgBSF,EAASG,GAhBlB,uBAiBY,IAAIC,MAAMF,EAAKG,SAAW,2BAjBtC,eAoBIlB,GAAW,GApBf,kBAsBWe,GAtBX,wCAwBIf,GAAW,GACXE,EAAS,KAAEgB,SAzBf,+DADyB,sDA8BzB,IAIyBjB,QAAOkB,WAFff,uBAAY,kBAAOF,EAAS,QAAO,MCpClDkB,EAAO,aAEAC,EAAcC,wBAAc,CACvCC,MAAO,KACPC,OAAQ,KACRC,MAAOL,EACPM,OAAQN,EACRO,iBAAiB,ICPNC,EAAS,kBACpB,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SACnE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,kCACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aACnB,yBAAKA,UAAU,YACX,yBAAKA,UAAU,wBACnB,yBAAKA,UAAU,gBCPZC,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1B,OAAKA,EAAMC,OAKP,+BACE,+BACE,4BACI,sCACA,uCACA,uCACA,sCAIN,+BACGD,EAAME,KAAI,SAACC,EAAMC,GAChB,OACE,wBAAIC,IAAKF,EAAKG,KACZ,4BAAKF,EAAQ,GACb,4BAAKD,EAAKI,MACV,4BAAKJ,EAAKK,IACV,4BACE,kBAAC,IAAD,CAAMA,GAAE,kBAAaL,EAAKG,MAA1B,eAtBP,uBAAGR,UAAU,UAAb,iBC4BIW,EA1BG,WAAO,IAAD,EACI9C,mBAAS,IADb,mBACfqC,EADe,KACRU,EADQ,OAEOhD,IAArBE,EAFc,EAEdA,QAASI,EAFK,EAELA,QACToB,EAAUuB,qBAAWzB,GAArBE,MAEFwB,EAAa3C,sBAAW,sBAAC,4BAAAE,EAAA,+EAELH,EAAQ,YAAa,MAAO,KAAM,CACtD6C,cAAc,UAAD,OAAYzB,KAHA,OAErB0B,EAFqB,OAK3BJ,EAASI,EAAQd,OALU,uGAO5B,CAACZ,EAAOpB,IAIX,OAFA+C,qBAAU,WAAOH,MAAe,CAACA,IAE7BhD,EACK,kBAAC,EAAD,MAIT,qCACIA,GAAW,kBAAC,EAAD,CAAWoC,MAAOA,M,gBCkEpBgB,EA1FE,WACf,IAAMC,EAAON,qBAAWzB,GAClBH,ECJCd,uBAAY,SAACiD,GACdC,OAAOC,GAAKF,GACdC,OAAOC,EAAEC,MAAM,CAAEC,KAAMJ,MAExB,IDFkB,EAG2BxD,IAAxCE,EAHa,EAGbA,QAASE,EAHI,EAGJA,MAAOE,EAHH,EAGGA,QAASgB,EAHZ,EAGYA,WAHZ,EAIGrB,mBAAS,CAC/B4D,MAAO,GACPC,SAAU,KANS,mBAIdC,EAJc,KAIRC,EAJQ,KASrBX,qBAAU,WACRhC,EAAQjB,GACRkB,MACC,CAAClB,EAAOiB,EAASC,IAEpB+B,qBAAU,WACRI,OAAOC,EAAEO,qBACR,IAEH,IAAMC,EAAe,SAACC,GAAW,IAAD,EACNA,EAAMC,OAAtBC,EADsB,EACtBA,KAAMC,EADgB,EAChBA,MACdN,EAAQ,2BAAKD,GAAN,kBAAaM,EAAOC,MAGvBC,EAAc,uCAAG,4BAAA9D,EAAA,+EAEAH,EAAQ,qBAAsB,OAAvB,eAAoCyD,IAF3C,OAEb7C,EAFa,OAGnBG,EAAQH,EAAKG,SAHM,uGAAH,qDAOdmD,EAAW,uCAAG,gCAAA/D,EAAA,+EAEgBH,EAAQ,kBAAmB,OAApB,eAAiCyD,IAFxD,gBAERrC,EAFQ,EAERA,MAAOC,EAFC,EAEDA,OACf4B,EAAK3B,MAAMF,EAAOC,GAHF,yGAAH,qDAOjB,OACE,yBAAKS,UAAU,OACb,yBAAKA,UAAU,oBACb,+GACA,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,2BACb,0BAAMA,UAAU,cAAhB,sEACA,6BACE,yBAAKA,UAAU,eACb,2BACEqC,YAAY,cACZC,GAAG,QACHC,KAAK,QACLN,KAAK,QACLO,SAAUV,IAEZ,2BAAOW,QAAQ,SAAf,UAEF,yBAAKzC,UAAU,eACb,2BACEqC,YAAY,iBACZC,GAAG,WACHC,KAAK,WACLN,KAAK,WACLO,SAAUV,IAEZ,2BAAOW,QAAQ,aAAf,eAIN,yBAAKzC,UAAU,eACb,4BACEA,UAAU,sBACVJ,MAAO,CAAE8C,YAAa,IACtBC,QAASP,EACTQ,SAAU9E,GAJZ,kCAQA,4BACEkC,UAAU,gCACV2C,QAASR,EACTS,SAAU9E,GAHZ,2EEpCG+E,EAxCI,WACjB,IAAMC,EAAUC,cACRzD,EAAUuB,qBAAWzB,GAArBE,MACApB,EAAYN,IAAZM,QAHe,EAICL,mBAAS,IAJV,mBAIhBwC,EAJgB,KAIV2C,EAJU,KAKjBC,EAAc,uCAAG,WAAOlB,GAAP,eAAA1D,EAAA,yDACH,UAAd0D,EAAMxB,IADW,0CAGErC,EAAQ,qBAAsB,OAAQ,CAAEuC,KAAMJ,GAAQ,CACvEU,cAAc,UAAD,OAAYzB,KAJV,OAGXR,EAHW,OAMjBgE,EAAQI,KAAR,kBAAwBpE,EAAKuB,KAAKG,MANjB,yGAAH,sDAepB,OALAS,qBAAU,WACRI,OAAOC,EAAEO,qBACR,IAID,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,eACb,2BACEqC,YAAY,aACZC,GAAG,OACHC,KAAK,OACLN,KAAK,OACLC,MAAO7B,EACPmC,SAAU,SAACW,GAAD,OAAOH,EAAQG,EAAEnB,OAAOE,QAClCkB,WAAYH,IAEd,2BAAOR,QAAQ,QAAf,kBCpCGY,EAAW,SAAC,GAAc,IAAZhD,EAAW,EAAXA,KACzB,OACE,oCACE,oCACA,yCAAc,uBAAGiD,KAAMjD,EAAKK,GAAIsB,OAAO,SAASuB,IAAI,uBAAuBlD,EAAKK,KAChF,oCAAS,uBAAG4C,KAAMjD,EAAKI,KAAMuB,OAAO,SAASuB,IAAI,uBAAuBlD,EAAKI,OAC7E,2CAAgB,gCAASJ,EAAKmD,SAC9B,2CAAgB,gCAAS,IAAIC,KAAKpD,EAAKqD,MAAMC,yBC0BpCC,EA5BI,WAAO,IAChBtE,EAAUuB,qBAAWzB,GAArBE,MADe,EAEM1B,IAArBM,EAFe,EAEfA,QAASJ,EAFM,EAENA,QAFM,EAGCD,mBAAS,MAHV,mBAGhBwC,EAHgB,KAGV2C,EAHU,KAIjBa,EAASC,cAAYxB,GAErByB,EAAU5F,sBAAW,sBAAC,4BAAAE,EAAA,+EAEFH,EAAQ,aAAD,OAAc2F,GAAU,MAAO,KAAM,CAChE9C,cAAc,UAAD,OAAYzB,KAHH,OAElB0B,EAFkB,OAKxBgC,EAAQhC,EAAQX,MALQ,uGAOzB,CAACf,EAAOuE,EAAQ3F,IAInB,OAFA+C,qBAAU,WAAO8C,MAAY,CAACA,IAE1BjG,EACK,kBAAC,EAAD,MAIP,8BACIA,GAAWuC,GAAQ,kBAAC,EAAD,CAAUA,KAAMA,MC1B9B2D,EAAS,WACpB,IAAMlB,EAAUC,cACRtD,EAAWoB,qBAAWzB,GAAtBK,OAOR,OACE,6BACE,yBAAKO,UAAU,eACb,uBAAGsD,KAAK,UAAUtD,UAAU,cAA5B,qGACA,wBAAIsC,GAAG,aAAatC,UAAU,8BAC5B,4BAAI,kBAAC,IAAD,CAASU,GAAG,WAAZ,+CACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,yCACJ,4BAAI,uBAAG4C,KAAK,IAAIX,QAbH,SAACZ,GACpBA,EAAMkC,iBACNxE,IACAqD,EAAQI,KAAK,OAUH,uC,MCYCgB,MAvBf,WAAgB,IAAD,ECNQ,WAAO,IAAD,EACDrG,mBAAS,MADR,mBACpByB,EADoB,KACb6E,EADa,OAEDtG,oBAAS,GAFR,mBAEpBuG,EAFoB,KAEbC,EAFa,OAGCxG,mBAAS,MAHV,mBAGpB0B,EAHoB,KAGZ+E,EAHY,KAKrB9E,EAAQrB,uBAAY,SAACoG,EAAUhF,GACnC4E,EAASI,GACTD,EAAU/E,GACViF,aAAaC,QAVG,WAYdhG,KAAKC,UAAU,CACba,SACAD,MAAOiF,OAGV,IAEG9E,EAAStB,uBAAY,WACzBgG,EAAS,MACTG,EAAU,MACVE,aAAaE,WAtBG,cAuBf,IAYH,OAVAzD,qBAAU,WACR,IAAMnC,EAAOL,KAAKkG,MAAMH,aAAaI,QA1BrB,aA4BZ9F,GAAQA,EAAKQ,OACfE,EAAMV,EAAKQ,MAAOR,EAAKS,QAEzB8E,GAAS,KAER,CAAC7E,IAEG,CAAEA,QAAOC,SAAQH,QAAOC,SAAQ6E,SD1BSS,GAAxCvF,EADK,EACLA,MAAOC,EADF,EACEA,OAAQC,EADV,EACUA,MAAOC,EADjB,EACiBA,OAAQ2E,EADzB,EACyBA,MAChC1E,IAAoBJ,EACpBwF,EERiB,SAACpF,GACxB,OAAIA,EAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqF,KAAK,SAASC,OAAK,GACxB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UAAUC,OAAK,GACzB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,cAAcC,OAAK,GAC7B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUtE,GAAG,aAMjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqE,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUtE,GAAG,OFfFuE,CAAUvF,GAEzB,OAAK0E,EAKH,kBAAChF,EAAY8F,SAAb,CAAsBhD,MAAO,CAC3B5C,QAAOE,QAAOC,SAAQF,SAAQG,oBAE9B,kBAAC,IAAD,KACGA,GAAmB,kBAAC,EAAD,MACpB,yBAAKM,UAAU,aACZ8E,KAVA,kBAAC,EAAD,OGJSK,QACW,cAA7B9D,OAAO+D,SAASC,UAEe,UAA7BhE,OAAO+D,SAASC,UAEhBhE,OAAO+D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAczB,MACrB0B,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjI,GACLkI,QAAQlI,MAAMA,EAAMiB,c","file":"static/js/main.69fcca4e.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      setLoading(true);\n\n      try {\n        if (body) {\n          body = JSON.stringify(body);\n          headers['Content-Type'] = 'application/json';\n        }\n\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n        });\n        const data = await response.json();\n\n        if (!response.ok) {\n          throw new Error(data.message || \"Something went wrong...\");\n        }\n\n        setLoading(false);\n\n        return data;\n      } catch (e) {\n        setLoading(false);\n        setError(e.message);\n        throw e;\n      }\n    },\n    []\n  );\n  const clearError = useCallback(()  => setError(null), []);\n\n  return { loading, request, error, clearError };\n};\n","import { createContext } from 'react';\n\nconst noop = () => {};\n\nexport const AuthContext = createContext({\n  token: null,\n  userId: null,\n  login: noop,\n  logout: noop,\n  isAuthenticated: false,\n});\n","import React from 'react';\n\nexport const Loader = ()  => (\n  <div style={{ display: 'flex', justifyContent: 'center', paddingTop: '2rem' }}>\n    <div className=\"preloader-wrapper active\">\n      <div className=\"spinner-layer spinner-red-only\">\n        <div className=\"circle-clipper left\">\n          <div className=\"circle\"></div>\n        </div><div className=\"gap-patch\">\n          <div className=\"circle\"></div>\n        </div><div className=\"circle-clipper right\">\n          <div className=\"circle\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nexport const LinksList = ({ links }) => {\n  if (!links.length) {\n    return <p className=\"center\">No links yet</p>\n  }\n\n  return (\n      <table>\n        <thead>\n          <tr>\n              <th>№</th>\n              <th>Initial</th>\n              <th>Cropped</th>\n              <th>Open</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {links.map((link, index) => {\n            return (\n              <tr key={link._id}>\n                <td>{index + 1}</td>\n                <td>{link.from}</td>\n                <td>{link.to}</td>\n                <td>\n                  <Link to={`/detail/${link._id}`}>Open</Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n  );\n};\n","import React, { useState, useCallback, useContext, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../components/Loader';\nimport { LinksList } from '../components/LinksList';\n\n\nconst LinksPage = () => {\n  const [links, setLinks] = useState([]);\n  const { loading, request } = useHttp();\n  const { token } = useContext(AuthContext);\n\n  const fetchLinks = useCallback(async () => {\n    try {\n      const fetched = await request('/api/link', 'GET', null, {\n        Authorization: `Bearer ${token}`,\n      });\n      setLinks(fetched.links);\n    } catch (e) {}\n  }, [token, request])\n\n  useEffect(() => {fetchLinks()}, [fetchLinks]);\n\n  if (loading) {\n    return <Loader />\n  }\n\n  return (\n  <>\n    {!loading && <LinksList links={links} />}\n  </>\n)};\n\nexport default LinksPage;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { useHttp } from \"../hooks/http.hook\";\nimport { useMessage } from \"../hooks/message.hook\";\nimport { AuthContext } from '../context/AuthContext';\n\n\nconst AuthPage = () => {\n  const auth = useContext(AuthContext);\n  const message = useMessage();\n  const { loading, error, request, clearError } = useHttp();\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  useEffect(() => {\n    message(error);\n    clearError();\n  }, [error, message, clearError]);\n\n  useEffect(() => {\n    window.M.updateTextFields();\n  }, [])\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setForm({ ...form, [name]: value });\n  };\n\n  const handleRegister = async () => {\n    try {\n      const data = await request(\"/api/auth/register\", \"POST\", { ...form });\n      message(data.message);\n    } catch (e) {}\n  };\n\n  const handleLogin = async () => {\n    try {\n      const { token, userId } = await request(\"/api/auth/login\", \"POST\", { ...form });\n      auth.login(token, userId);\n    } catch (e) {}\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col s6 offset-s3\">\n        <h1>Сократи ссылку</h1>\n        <div className=\"card blue darken-1\">\n          <div className=\"card-content white-text\">\n            <span className=\"card-title\">Авторизация</span>\n            <div>\n              <div className=\"input-field\">\n                <input\n                  placeholder=\"Enter email\"\n                  id=\"email\"\n                  type=\"email\"\n                  name=\"email\"\n                  onChange={handleChange}\n                />\n                <label htmlFor=\"email\">Email</label>\n              </div>\n              <div className=\"input-field\">\n                <input\n                  placeholder=\"Enter password\"\n                  id=\"password\"\n                  type=\"password\"\n                  name=\"password\"\n                  onChange={handleChange}\n                />\n                <label htmlFor=\"password \">Password</label>\n              </div>\n            </div>\n          </div>\n          <div className=\"card-action\">\n            <button\n              className=\"btn yellow darken-4\"\n              style={{ marginRight: 10 }}\n              onClick={handleLogin}\n              disabled={loading}\n            >\n              Войти\n            </button>\n            <button\n              className=\"btn grey lighten-1 white-text\"\n              onClick={handleRegister}\n              disabled={loading}\n            >\n              Регистрация\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthPage;\n","import { useCallback } from 'react';\n\n\nexport const useMessage = () => {\n  return useCallback((text) => {\n    if (window.M && text) {\n      window.M.toast({ html: text });\n    }\n  }, [])\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\n\n\nconst CreatePage = () => {\n  const history = useHistory();\n  const { token } = useContext(AuthContext);\n  const { request } = useHttp();\n  const [link, setLink] = useState('');\n  const handleKeyPress = async (event) => {\n    if (event.key === 'Enter') {\n      try {\n        const data = await request('/api/link/generate', 'POST', { from: link }, {\n          Authorization: `Bearer ${token}`,\n        });\n        history.push(`/detail/${data.link._id}`);\n      } catch (e) {}\n    }\n  };\n  useEffect(() => {\n    window.M.updateTextFields();\n  }, [])\n\n\n  return (\n    <div className=\"row\">\n      <div className=\"row s8 offset-s2\">\n        <div className=\"input-field\">\n          <input\n            placeholder=\"Enter link\"\n            id=\"link\"\n            type=\"text\"\n            name=\"link\"\n            value={link}\n            onChange={(e) => setLink(e.target.value)}\n            onKeyPress={handleKeyPress}\n          />\n          <label htmlFor=\"link\">Enter link</label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreatePage;\n","import React from 'react';\n\n\nexport const LinkCard = ({ link }) => {\n  return (\n    <>\n      <h2>Link</h2>\n      <p>Your link: <a href={link.to} target=\"_blank\" rel=\"noopener noreferrer\">{link.to}</a></p>\n      <p>From: <a href={link.from} target=\"_blank\" rel=\"noopener noreferrer\">{link.from}</a></p>\n      <p>Click count: <strong>{link.clicks}</strong></p>\n      <p>Create page: <strong>{new Date(link.date).toLocaleDateString()}</strong></p>\n    </>\n  );\n};\n","import React, { useState, useCallback, useContext, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../components/Loader';\nimport { LinkCard } from '../components/LinkCard';\n\n\nconst DetailPage = () => {\n  const { token } = useContext(AuthContext);\n  const { request, loading } = useHttp();\n  const [link, setLink] = useState(null);\n  const linkId = useParams().id;\n\n  const getLink = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`,\n      });\n      setLink(fetched.link);\n     } catch (e) {}\n  }, [token, linkId, request]);\n\n  useEffect(() => {getLink()}, [getLink]);\n\n  if (loading) {\n    return <Loader />\n  }\n\n  return (\n    <div>\n      {!loading && link && <LinkCard link={link}/>}\n    </div>\n  )\n};\n\nexport default DetailPage;\n","import React, { useContext } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\n\n\nexport const Navbar = () => {\n  const history = useHistory();\n  const { logout } = useContext(AuthContext);\n  const handleLogout = (event) => {\n    event.preventDefault();\n    logout();\n    history.push('/');\n  };\n\n  return (\n    <nav>\n      <div className=\"nav-wrapper\">\n        <a href=\"/create\" className=\"brand-logo\">Сокращение ссылок</a>\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n          <li><NavLink to=\"/create\">Создать</NavLink></li>\n          <li><NavLink to=\"/links\">Ссылки</NavLink></li>\n          <li><a href=\"/\" onClick={handleLogout}>Выйти</a></li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { useRoutes } from './routes';\nimport { useAuth } from './hooks/auth.hook';\nimport { AuthContext } from './context/AuthContext';\nimport { Navbar } from './components/Navbar';\nimport { Loader } from './components/Loader';\nimport 'materialize-css';\n\n\nfunction App() {\n  const { token, userId, login, logout, ready } = useAuth();\n  const isAuthenticated = !!token;\n  const routes = useRoutes(isAuthenticated);\n\n  if (!ready) {\n    return <Loader />;\n  }\n\n  return (\n    <AuthContext.Provider value={{\n      token, login, logout, userId, isAuthenticated,\n    }}>\n      <Router>\n        {isAuthenticated && <Navbar />}\n        <div className=\"container\">\n          {routes}\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import { useState, useCallback, useEffect } from \"react\";\n\nconst storageName = \"userData\";\n\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  const [ready, setReady] = useState(false);\n  const [userId, setUserId] = useState(null);\n\n  const login = useCallback((jwtToken, userId) => {\n    setToken(jwtToken);\n    setUserId(userId);\n    localStorage.setItem(\n      storageName,\n      JSON.stringify({\n        userId,\n        token: jwtToken,\n      })\n    );\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    localStorage.removeItem(storageName);\n  }, []);\n\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(storageName));\n\n    if (data && data.token) {\n      login(data.token, data.userId);\n    }\n    setReady(true);\n    // т.к. логин в зависимости его нужно было завернуть в useCallback\n  }, [login]);  // в зависимости логин - потому ччто он внетри используется\n\n  return { login, logout, token, userId, ready };\n};\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { LinksPage, AuthPage, CreatePage, DetailPage } from './pages';\n\n\nexport const useRoutes = (isAuthenticated) => {\n  if (isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/links\" exact>\n          <LinksPage />\n        </Route>\n        <Route path=\"/create\" exact>\n          <CreatePage />\n        </Route>\n        <Route path=\"/detail/:id\" exact>\n          <DetailPage />\n        </Route>\n        <Redirect to=\"/create\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact>\n        <AuthPage />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}